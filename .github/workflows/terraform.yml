name: TF

on:
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: prod_env
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Authenticate with the Azure CLI
      - name: Login via Azure CLI
        uses: Azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: .tf
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        working-directory: .tf
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        working-directory: .tf
        env:
          TF_VAR_rg_app: ${{ secrets.TF_VAR_rg_app }}
          TF_VAR_rg_acr: ${{ secrets.TF_VAR_rg_acr }}
          TF_VAR_acr_minimal_api: ${{ secrets.TF_VAR_acr_minimal_api }}
          TF_VAR_uname: ${{ secrets.TF_VAR_uname }}
          TF_VAR_pword: ${{ secrets.TF_VAR_pword }}
        run: terraform plan -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # use following confition for push apply >if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      - name: Terraform Apply
        working-directory: .tf
        env:
          TF_VAR_rg_app: ${{ secrets.TF_VAR_rg_app }}
          TF_VAR_rg_acr: ${{ secrets.TF_VAR_rg_acr }}
          TF_VAR_acr_minimal_api: ${{ secrets.TF_VAR_acr_minimal_api }}
          TF_VAR_uname: ${{ secrets.TF_VAR_uname }}
          TF_VAR_pword: ${{ secrets.TF_VAR_pword }}
        run: terraform apply -auto-approve -input=false
